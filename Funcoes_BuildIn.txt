** ALGUMAS FUNÇÕES BÁSICAS DO HASKELL **

Na maiorida das linguagens imperativas as funções são
invocadas com o nome e passando os argumentos através
de parênteses, e seus argumentos separados por virgu-
la. No Haskell não é utilizado parênteses para esse
fim, os argumentos da funçao veem depois do nome da
mesma separados por espaço. Os argumentos da função
também são sepados um do outro por um espaço.

** Exemplo de Funções **

DIV - Retorna a parte inteira da divisão
Prelude> div 3 2 
1

MOD - Resto da divisão
Prelude> mod 3 2
1
Prelude> mod 6 2
0
Prelude> 6 `mod` 2
0
Note que também é possivel passar o nome da função deslocada
no centro, utilizando o caractere de acento grave `

SUCC - Incrementa um inteiro ao número
ghci> succ 9.1
10.1

SHOW - Converte de algum formato para string
ghci> show 3  
"3"  
ghci> show 5.334  
"5.334"  
ghci> show True  
"True"  

READ - Converte de string para outro formato
ghci> read "5" :: Int  
5  
ghci> read "5" :: Float  
5.0  
ghci> (read "5" :: Float) * 4  
20.0  
ghci> read "[1,2,3,4]" :: [Int]  
[1,2,3,4]  
ghci> read "(3, 'a')" :: (Int, Char)  
(3, 'a')  

** Cast de Inteiro para outro tipo
ghci> 20 :: Int  
20  
ghci> 20 :: Integer  
20  
ghci> 20 :: Float  
20.0  
ghci> 20 :: Double  
20.0  

ABS - Retorna o valor absoluto(módulo)
Prelude> abs (-20)
20

EXP - Realiza a potência com base em neperiano
Prelude> exp 2
7.38905609893065

LOG - Logarítmo na base neperiana
Prelude> log 10
2.302585092994046

*** Outras Funções do Tipo ***
SQRT - Retorna a raiz quadrada
FLOOR - Arredonda para baixo
CEILING - Arredonda para cima
ROUND - Arredonda para o lado mais próximo (cima ou baixo)

*** Biblioteca Data.Char ***
Prelude> import Data.Char
Prelude Data.Char> 

ORD - Retorna o inteiro correspondente ao valor ASCII do char
Prelude Data.Char> ord 'F'
70

CHR - Retorna o char equivalente ao inteiro da tabela ASCII
Prelude Data.Char> chr 70
'F'




